<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0034)http://www.kipfer.com.br/cobol.htm -->
<HTML><HEAD><TITLE>Documento sem título</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content="MSHTML 6.00.2800.1595" name=GENERATOR></HEAD>
<BODY vLink=#000000 aLink=#000000 link=#000000 bgColor=#666666>
<TABLE width=980 bgColor=#cccccc border=0>
  <TBODY>
  <TR>
    <TD>
      <DIV align=justify>
      <P align=center><STRONG><FONT size=4>Cobol</FONT></STRONG></P>
      <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COBOL é uma linguagem de 
      programação de Terceira Geração. Este nome é a sigla de COmmon Business 
      Oriented Language (Linguagem Orientada aos Negócios), que define seu 
      objetivo principal em sistemas comerciais, financeiros e administrativos 
      para empresas e governos.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O COBOL 
      padrão 2002 inclui suporte para programação orientada a objetos e outras 
      características das linguagens modernas. </P></DIV>
      <P align=center><STRONG><FONT size=4>Características:</FONT></STRONG></P>
      <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O COBOL foi definido 
      na especificação original, possuia excelentes capacidades de 
      autodocumentação, bons métodos de manuseio de arquivos, e excepcional 
      modelagem de dados para a época, graças ao uso da cláusula PICTURE para 
      especificações detalhadas de campos. Entretanto, segundo os padrões 
      modernos de definição de linguagens de programação, tinha sérias 
      deficiências, notadamente sintaxe prolixa e falta de suporte da variáveis 
      locais, recorrência, alocação dinâmica de memória e programação 
      estruturada. A falta de suporte à linguagem orientada a objeto é 
      compreensível, já que o conceito era desconhecido naquela 
      época.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O COBOL possui muitas 
      palavras reservadas, e é difícil evitar de usar alguma inadvertidamente 
      sem o uso de alguma convenção, como adicionando um prefixo a todos os 
      nomes de variáveis. A especificação original do COBOL suportava até código 
      auto-modificável através do famoso comando "ALTER X TO PROCEED TO Y". 
      Entretanto, a especificação do COBOL foi redefinida de tempos em tempos 
      para atender a algumas das críticas, e as últimas definições do COBOL 
      corrigiram muitas destas falhas, acrescentando estruturas de controle 
      melhoradas, orientação a objeto e removendo a possibilidade de codificação 
      auto-modificável.</P>
      <P align=center><STRONG><FONT size=4>Resistência</FONT></STRONG></P>
      <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Embora o COBOL tenha 
      sido proposto originalmente como solução para resolver problemas de 
      programação do governo e das forças armadas americanas, programas COBOL 
      continuam em uso na maioria das empresas comerciais em todo o mundo, 
      notadamente nas instituições financeiras, e em praticamente todos os 
      sistemas operacionais, incluindo o IBM z/OS, o Microsoft Windows e a 
      família Unix/Linux. A base global de código é imensa e os aplicativos, de 
      tempos em tempos, são sujeitos a manutenção. O custo de reescrever um 
      aplicativo COBOL, já depurado, em uma nova linguagem não justifica os 
      benefícios que possa eventualmente trazer. No fim dos anos 90 o Gartner 
      Group, uma empresa de pesquisa na área de processamento de dados, estimou 
      que dos 300 bilhões de linhas de código-fonte existentes no mundo, 80% - 
      ou cerca de 240 bilhões de linhas - eram em COBOL. Eles também reportaram 
      que mais de metade dos novos aplicativos de missão críticas ainda estavam 
      sendo desenvolvidos usando o 
      COBOL.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ao se aproximar o fim do 
      século XX houve uma febre de atividade de programadores COBOL para 
      corrigir os efeitos do bug do milênio, em certos casos em sistemas 
      desenvolvidos por estes mesmos programadores há décadas. Este problema foi 
      mais crítico no código COBOL porque as datas são primordiais em 
      aplicativos comerciais, e a maioria dos aplicativos comerciais foram 
      escritos em COBOL.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Algumas pessoas 
      acreditam que o uso de aritmética decimal codificada em binário fez com 
      que programas desenvolvidos sem a previsão de datas com ano de 4 dígitos 
      ficassem particularmente vulneráveis a falhas com o problema do ano 2000; 
      entretanto é difícil justificar esta opinião. Outros argumentam que a 
      aritmética BCD do COBOL evitou muitos outros problemas que poderiam 
      ocorrer com o uso ingênuo do ponto flutuante em cálculos financeiros.<BR>O 
      COBOL provou ser durável e adaptável. O padrão atual do COBOL é o 
      COBOL2002. O COBOL2002 suporta agora conveniências modernas como Unicode, 
      geração de XML e convenção de chamadas de/para linguagens como o C, 
      inclusão como linguagem de primeira classe em ambientes de desenvolvimento 
      como o .NET da Microsoft e a capacidade de operar em ambientes fechados 
      como Java (incluindo COBOL em instâncias de EJB) e acesso a qualquer base 
      SQL.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A motivação do desenvolvimento 
      do COBOL era de facilitar a programação tornando a linguagem a mais 
      próxima possível do inglês. Embora esta idéia pareça razoável, na prática 
      a tarefa mais difícil na programação é reduzir uma computação complexa 
      numa seqüência de passos simples, não associando estes passos com uma 
      linguagem natural. Os críticos argumentam que a sintaxe prolixa e a 
      estrutura geral do COBOL só serve para aumentar o tamanho do programa e 
      dificultar o desenvolvimento do pensamento preciso necessário para o 
      desenvolvimento de software. O cientista de computação Edsger Dijkstra 
      observou em um artigo em 1975 (How do we tell truths that might hurt?): "O 
      uso do COBOL mutila a mente; seu ensino deveria, portanto, ser considerado 
      um crime" -- Dijkstra estava muito bem impressionado pelas idéias de 
      Michael A. Jackson sobre a "Programação Estruturada" em COBOL (Jackson 
      Structured Programming).<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Antigas 
      versões do COBOL não dão suporte a variáveis locais e portanto não 
      implementam inteiramente a programação 
      estruturada.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alguns programadores 
      brincam dizendo que a extensão orientada a objeto do COBOL deveria ser 
      chamada ADD 1 TO COBOL GIVING COBOL. Trata-se de uma analogia com o C++, 
      um trocadilho da sintaxe da linguagem C para incrementar uma variável, e 
      evidenciar a prolixidade do COBOL comparada com o 
      C.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Por outro lado, os defensores do 
      COBOL argumentam que os que o criticam e ironizam a linguagem nunca foram 
      programadores COBOL e geralmente o desconhecem. Na maioria das versões 
      atuais os compiladores não fazem distinção entre maiúsculas e minúsculas, 
      embora o compilador irá transformar em maiúsculas todas as palavras-chave 
      antes de processá-las.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Se alguém 
      quiser tornar o COBOL menos prolixo do que é, geralmente consegue. Por 
      exemplo o código:</P>
      <P align=justify>ADD A TO B GIVING C.<BR>DIVIDE 2 INTO C GIVING C.</P>
      <P align=justify>pode ser escrito assim:</P>
      <P align=justify>COMPUTE C = (A + B) / 2.</P>
      <P align=justify>e o verbo COMPUTE pode manipular fórmulas bastante 
      complexas em forma algébrica. Por exemplo, o código em COBOL da equação de 
      Báskara pode ser escrito, usando o verbo COMPUTE, que pode manipular 
      fórmulas bastante complexas em forma algébrica, como esta:</P>
      <P align=justify>COMPUTE X = (-B + (B ** 2 - (4 * A * C)) **.5) / (2 * 
      A)</P>
      <P align=justify>ou esta:</P>
      <P align=justify>MULTIPLY B BY B GIVING B-SQUARED. <BR>MULTIPLY 4 BY A 
      GIVING FOUR-A. <BR>MULTIPLY FOUR-A BY C GIVING FOUR-A-C. <BR>SUBTRACT 
      FOUR-A-C FROM B-SQUARED GIVING RESULT-1. <BR>COMPUTE RESULT-2 = RESULT-1 
      ** .5.<BR>SUBTRACT B FROM RESULT-2 GIVING NUMERATOR.<BR>MULTIPLY 2 BY A 
      GIVING DENOMINATOR.<BR>DIVIDE NUMERATOR BY DENOMINATOR GIVING X.</P>
      <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enquanto linguagens 
      concisas como o C podem encorajar desenvolvedores a escrever código que 
      pode ser difícil a entender e depurar, o COBOL encoraja o desenvolvimento 
      inteligível ao nível da instrução.</P>
      <P align=center><STRONG><FONT size=4>Porque Cobol?</FONT></STRONG></P>
      <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Indiscutivelmente o COBOL tem 
      muitas 
      virtudes:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Portabilidade 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Segurança 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Estabilidade 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compatibilidade 
      entre versões e Dialetos 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Legibilidade 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Normalmente quando se fala em 
      COBOL, já se pensa em Mainframe, museus, múmias, dinossauros, avós, 
      fósseis e coisas do gênero. Mas quem conhece o COBOL, sabe que a linguagem 
      está evoluindo e acompanhando as tecnologias mais atuais.<BR>Os 
      fornecedores COBOL tem uma missão muito difícil, mas que estão conseguindo 
      cumprir, que é disponibilizar novas tecnologias mantendo a compatibilidade 
      com os códigos legados, o que facilita a implementação dos Sistemas 
      existentes através da reutilização dos códigos, aproveitamento do 
      conhecimento profissional dos programadores e respeitando os investimentos 
      já realizados.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Aplicações de massa 
      crítica com altíssimo volume de dados e transações é arroz com feijão 
      para o Cobol. Quantos milhões de correntistas possuem um banco em todo 
      país? Quantos milhões de transações são realizadas por dia nessas 
      instituições? Para o Cobol tanto 
      faz.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O tamanho do programa (a 
      quantidade de linhas de código) é praticamente ilimitado. Há pouco li algo 
      sobre um programa Cobol escrito para auditoria de estoques cuja listagem 
      do fonte resultou quase 300 páginas de formulário contínuo. Parece muito? 
      Na verdade é pouco. Essa listagem continha pouco menos de 17.000 linhas. 
      Com o Cobol é possível chegar em até um milhão de 
      linhas.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Equipamentos de médio porte 
      com Unix e sistemas proprietários também se beneficiam, ainda hoje existem 
      empresas utilizando minicomputadores da década de 80 com sistemas 
      desenvolvidos em Cobol. Mesma coisa com os microcomputadores. Toda a 
      interface gráfica que o Windows, o .NET e o Linux oferecem é igualmente 
      usufruída pelo Cobol no desenvolvimento de 
      aplicações.<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Analisemos o 
      seguinte: 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do 
      Basic surgiu o Visual Basic (que não é mais aquele Basic !), 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do 
      Pascal surgiu o DELPHI (que também não é mais aquele Pascal). 
      <BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E o COBOL ? 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bem, 
      o COBOL fez o seguinte: 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Implementou 
      se e cresceu tal qual os outros exemplos, mas fez tudo isso sem mudar seu 
      rótulo, continua se chamando COBOL, daí a insistência em 
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;achar 
      o Cobol uma linguagem 
      ultrapassada.<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Com relação as 
      novas ferramentas e versões do COBOL podemos 
      destacar:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NetExpress 
      (Micro Focus "Merant") 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PowerCOBOL 
      (Fujitsu) 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Acucobol 
      GT (Acucorp) 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object 
      COBOL 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RM 
      COBOL 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TinyCobol 
      (Projeto Brasileiro de Compilador Gratuito para LINUX) 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entre 
      outros.</P>
      <P align=center>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deve-se deixar bem 
      claro também, que existem inúmeras opções de ferramentas de apoio e 
      ferramentas CASE, também utilizando os mais modernos conceitos de 
      tecnologia.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pelo que me consta, as 
      universidades não estão dando mais importância ao ensino do COBOL, em 
      algumas delas até já não se ensina mais, o que consideramos um erro, pois 
      quando os alunos ingressarem no mercado de trabalho provavelmente vão se 
      deparar com várias empresas que utilizam esta linguagem , como Bancos e 
      outras empresas de grande 
      porte.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Existem vários programadores 
      COBOL (SoftHouses) que abandonaram a linguagem por escolha própria, pois 
      certamente tentaram utilizar as ferramentas erradas ou ainda não sabiam 
      explorar todo o potencial desta linguagem. É sabido que existem empresas 
      onde é impossível mudar os Sistemas existentes devido a uma enorme 
      quantidade de código COBOL e até mesmo um grande parque de equipamentos 
      que simplesmente não suportam conceitos como GUI por exemplo. E ao se 
      deparar com um caso desses, não da para apenas trocar tudo, há muitos 
      custos envolvidos. Há mais em jogo do que a simples vontade de mudar 
      radicalmente as coisas, há recursos de informática envolvidos, 
      administração de pessoal e tempo além do risco de simplesmente escolher a 
      tecnologia errada, pois atualmente há tecnologias que surgem e desaparecem 
      rápida e estranhamente deixando um rastro de cabeças pelo chão. 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Na maioria esmagadora das vezes se 
      opta por substituir o COBOL por uma linguagem mais nova com o intuito de 
      se ganhar produtividade e desenvolver Software com mais qualidade e 
      segurança, mas não se percebe que a linguagem não é o problema, muitas 
      vezes o problema é a não utilização de metodologias corretas de trabalho 
      no que diz respeito a fases de análise, reengenharia, organização, 
      planejamento e administração de recursos e até mesmo de 
      pessoal.<BR><BR><STRONG><FONT size=4>Portabilidade</FONT></STRONG></P>
      <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Uma das principais 
      vantagens que a Cobol trouxe foi uma padronização, ou uniformização entre 
      os fabricantes de computadores. Podemos então dizer que tal linguagem de 
      programação possui grande 
      portabilidade<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Muita gente não se 
      preocupa com isso quando se fala em linguagens como DELPHI ou VB, pois 
      hoje, pode-se lançar mão da tecnologia CLIENT/SEVER,onde estações WINDOWS 
      acessam base de dados em servidores UNIX/COMPATÍVEIS (Os mais seguros e 
      eficientes). <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Porém ainda existe o 
      fato de se deparar com a necessidade de trocar as máquinas cliente por 
      LINUX, que é uma opção exageradamente mais barata do que Windows, embora 
      ainda não esteja sendo devidamente aproveitada. E ai se faz o que, espera 
      a Microsft lançar o VB for Linux?! E se lançar? O Kylyx acabou não dando 
      em nada. <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sem contar que em alguns 
      casos uma interface texto é o que realmente atende a certas necessidades 
      das empresas, sem precisar de hardware exigente e nem de investimentos 
      mais exigentes ainda.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Para 
      encerrar, a história nos tem mostrado que com o COBOL, podem desaparecer 
      Sistemas Operacionais, surgir novas tecnologias em Software e Hardware e 
      você tem a garantia da continuidade, e tudo será reutilizável, (o 
      conhecimento da equipe, o seu investimento, as informações e muito mais), 
      e isso ninguém pode contestar, afinal de contas, dia a dia desde longa 
      data, os fatos têm provado isso.</P>
      <P align=right><EM>Baseado no artigo escrito por Marcio Adroaldo da 
      Silva.</EM></P></TD></TR></TBODY></TABLE>
<P> </P></BODY></HTML>
